!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ArrayExpression	anf.js	/^visitor.ArrayExpression = function ArrayExpression(path) {$/;"	f
AssignmentExpression	anf.js	/^visitor.AssignmentExpression = function AssignmentExpression(path) {$/;"	f
BreakStatement	anf.js	/^visitor.BreakStatement = function BreakStatement(path) {$/;"	f
BreakStatement	desugarLabel.js	/^visitor.BreakStatement = function BreakStatement(path) {$/;"	f
CallExpression	anf.js	/^visitor.CallExpression = function CallExpression(path) {$/;"	f
ContinueStatement	anf.js	/^visitor.ContinueStatement = function ContinueStatement(path) {$/;"	f
DoWhileStatement	desugarLoop.js	/^visitor.DoWhileStatement = function DoWhileStatement(path) {$/;"	f
ForStatement	desugarLoop.js	/^visitor.ForStatement = function ForStatement(path) {$/;"	f
LabeledStatement	desugarLabel.js	/^visitor.LabeledStatement = function LabeledStatement(path) {$/;"	f
Loop	anf.js	/^visitor.Loop = function Loop(path) {$/;"	f
Loop	verifier.js	/^visitor.Loop = function Loop(path) {$/;"	f
MemberExpression	anf.js	/^visitor.MemberExpression = function MemberExpression(path) {$/;"	f
ReturnStatement	anf.js	/^visitor.ReturnStatement = function ReturnStatement(path) {$/;"	f
VariableDeclarator	callccPass1.js	/^visitor.VariableDeclarator = function VariableDeclarator(path) {$/;"	f
WhileStatement	anf.js	/^visitor.WhileStatement = function WhileStatement(path) {$/;"	f
cps	recursiveCPS.js	/^function cps(statements, path) {$/;"	f
cpsDecls	recursiveCPS.js	/^  function cpsDecls(decls, continuation) {$/;"	f	function:cps
cpsM	recursiveCPS.js	/^function cpsM(m) {$/;"	f
flatBodyStatement	helpers.js	/^function flatBodyStatement(body) {$/;"	f
flatten	helpers.js	/^function flatten(seq) {$/;"	f
isAtomic	helpers.js	/^function isAtomic(node) {$/;"	f
isTerminating	helpers.js	/^function isTerminating(node) {$/;"	f
isTerminating	recursiveCPS.js	/^function isTerminating(node) {$/;"	f
isTerminatingDeclaration	recursiveCPS.js	/^  function isTerminatingDeclaration(d) {$/;"	f	function:isTerminating
letExpression	desugarLoop.js	/^function letExpression(name, value, kind) {$/;"	f
letExpression	helpers.js	/^function letExpression(name, value) {$/;"	f
mapStratify	stratify.js	/^  function mapStratify(s) {$/;"	f
module.exports	anf.js	/^module.exports = function transform(babel) {$/;"	f
module.exports	callccPass1.js	/^module.exports = function transform(babel) {$/;"	f
module.exports	desugarAndOr.js	/^module.exports = function transform(babel) {$/;"	f
module.exports	desugarLabel.js	/^module.exports = function transform(babel) {$/;"	f
module.exports	desugarLoop.js	/^module.exports = function transform(babel) {$/;"	f
module.exports	recursiveCPS.js	/^module.exports = function transform(babel) {$/;"	f
module.exports	stratify.js	/^module.exports = function transform(babel) {$/;"	f
module.exports	verifier.js	/^module.exports = function transform(babel) {$/;"	f
namedFunction	callccPass1.js	/^function namedFunction(fname, arg, body) {$/;"	f
stratifyExpression	stratify.js	/^function stratifyExpression(e, k, path) {$/;"	f
stratifyStatement	stratify.js	/^function stratifyStatement(statement, k, path) {$/;"	f
transform	anf.js	/^module.exports = function transform(babel) {$/;"	f
transform	callccPass1.js	/^module.exports = function transform(babel) {$/;"	f
transform	desugarAndOr.js	/^module.exports = function transform(babel) {$/;"	f
transform	desugarLabel.js	/^module.exports = function transform(babel) {$/;"	f
transform	desugarLoop.js	/^module.exports = function transform(babel) {$/;"	f
transform	recursiveCPS.js	/^module.exports = function transform(babel) {$/;"	f
transform	stratify.js	/^module.exports = function transform(babel) {$/;"	f
transform	verifier.js	/^module.exports = function transform(babel) {$/;"	f
visitor	verifier.js	/^visitor['SwitchStatement|SwitchCase'] = function (path) {$/;"	f
visitor.ArrayExpression	anf.js	/^visitor.ArrayExpression = function ArrayExpression(path) {$/;"	f
visitor.AssignmentExpression	anf.js	/^visitor.AssignmentExpression = function AssignmentExpression(path) {$/;"	f
visitor.BinaryExpression	anf.js	/^visitor.BinaryExpression = function (path) {$/;"	f
visitor.BreakStatement	anf.js	/^visitor.BreakStatement = function BreakStatement(path) {$/;"	f
visitor.BreakStatement	desugarLabel.js	/^visitor.BreakStatement = function BreakStatement(path) {$/;"	f
visitor.CallExpression	anf.js	/^visitor.CallExpression = function CallExpression(path) {$/;"	f
visitor.ContinueStatement	anf.js	/^visitor.ContinueStatement = function ContinueStatement(path) {$/;"	f
visitor.DoWhileStatement	desugarLoop.js	/^visitor.DoWhileStatement = function DoWhileStatement(path) {$/;"	f
visitor.ForStatement	desugarLoop.js	/^visitor.ForStatement = function ForStatement(path) {$/;"	f
visitor.LabeledStatement	desugarLabel.js	/^visitor.LabeledStatement = function LabeledStatement(path) {$/;"	f
visitor.LogicalExpression	desugarAndOr.js	/^visitor.LogicalExpression = function (path) {$/;"	f
visitor.LogicalExpression	verifier.js	/^visitor.LogicalExpression = function (path) {$/;"	f
visitor.Loop	anf.js	/^visitor.Loop = function Loop(path) {$/;"	f
visitor.Loop	verifier.js	/^visitor.Loop = function Loop(path) {$/;"	f
visitor.MemberExpression	anf.js	/^visitor.MemberExpression = function MemberExpression(path) {$/;"	f
visitor.Program	recursiveCPS.js	/^visitor.Program = function (path) {$/;"	f
visitor.Program	stratify.js	/^visitor.Program = function (path) {$/;"	f
visitor.ReturnStatement	anf.js	/^visitor.ReturnStatement = function ReturnStatement(path) {$/;"	f
visitor.VariableDeclarator	callccPass1.js	/^visitor.VariableDeclarator = function VariableDeclarator(path) {$/;"	f
visitor.WhileStatement	anf.js	/^visitor.WhileStatement = function WhileStatement(path) {$/;"	f
