include engines.mk
include transform.mk

# Name of the runner
RUNNER = "./runner.sh"
BASEFILES := $(wildcard base/*.js)
FILES := $(BASEFILES:base/%=%)

TIMES := $(foreach t, $(TRANSFORMS), \
				   $(foreach i, $(INTERVALS), \
					   $(foreach e, $(ENGINENAME), $e-$t-$i-times.csv))) \
				 $(foreach e, $(ENGINENAME), $e-base-times.csv)

PLOTS := $(foreach t, $(TRANSFORMS), \
				   $(foreach e, $(ENGINENAME), $e-$t-plot.pdf))

				 #$(foreach t, $(TRANSFORMS), \
					 #$(foreach f, $(FILES), \
						 #$(foreach e, $(ENGINENAME), $e-$t-$f-times.csv))) \

UNAME := $(shell uname)
ifeq ($(UNAME),Darwin)
	TIMER := $(shell which gtime)
else
	TIMER := '/usr/bin/time'
endif

TIMEFLAGS=--append --format "%E"

.PHONY: time plot clean
plot: $(PLOTS)

time: $(TIMES)

clean:
	rm -f *csv *pdf

# $(1) is the engine name
# $(2) is the transform name
# $(3) is the file name
# NOTE(rachit): This cannot be a pattern target because it conflicts with other
# rules.
define TRANSFORM_PLOT_FILE_template
$(strip $(1))-$(strip $(2))-$(strip $(3))-times.csv: \
		$(foreach i, $(INTERVALS), $(strip $(1))-$(strip $(2))-$i-times.csv) \
		$(strip $(1))-base-times.csv
	grep $(strip $(3)) $(strip $(1))-base-times.csv \
		$(foreach i, $(INTERVALS), $(strip $(1))-$(strip $(2))-$i-times.csv) \
		| sed 's/:$(strip $(3))//g' > $$@
endef

# $(1) is the engine name
# $(2) is the transform name
define PLOT_TRANSFORM_template
$(strip $(1))-$(strip $(2))-plot.pdf: \
	$(foreach f, $(FILES), $(strip $(1))-$(strip $(2))-$f-times.csv)
	racket plot-transform.rkt $$@ \
		$(foreach f, $(FILES), $(strip $(1))-$(strip $(2))-$f-times.csv)

$(foreach f, $(FILES), \
	$(eval $(call TRANSFORM_PLOT_FILE_template,$(strip $(1)),$(strip $(2)),$f)))
endef

$(foreach t, $(TRANSFORMS), \
	$(foreach e, $(ENGINENAME), \
		$(eval $(call PLOT_TRANSFORM_template,$e,$t))))

# $(1) is the engine name.
# $(2) is the engine path.
define BASERUNNER_template
$(strip $(1))-base-times.csv: $(foreach f, $(FILES), base/$(strip $(1))/0/$f)

.PHONY: base/$(strip $(1))/0/%
base/$(strip $(1))/0/%:
	@echo 'Baseline $$* with $(strip $(1))'
	@(d=$$$$(mktemp) && echo "$$*,\c" >> $$$$d && \
	  cat base/$$* | \
		( $(TIMER) --output=$$$$d $(TIMEFLAGS) $(2) 2> /dev/null ) && \
		cat $$$$d >> $(1)-base-times.csv || \
		(printf "\r\033[0;31mFailed $$*\033[0m\n" && \
		echo "$$*,-1" >> $(1)-base-times.csv))
endef

$(foreach e, $(ENGINEDATA), $(eval $(call BASERUNNER_template, \
															        $(call GET_ENAME,$(e)), \
														          $(call GET_EPATH,$(e)))))

# $(1) is the path of the javascript engine
# $(2) is the name of the javascript engine.
# $(3) is the name of the transform.
# $(4) is the yield interval
define RUNNER_template
$(strip $(2))-$(strip $(3))-$(strip $(4))-times.csv: \
	$(foreach f, $(FILES), $(strip $(3))/$(strip $(2))/$(strip $(4))/$f)

$(strip $(3))/$(strip $2)/$(strip $(4))/%:
	@echo 'Running $(3)/$$* with $(strip $(2)), yielding $(4)'
	@(d=$$$$(mktemp) && echo "$$*,\c" >> $$$$d && \
		cat $(3)/$$* | \
		sed 's/\/\/|INTERVAL|/$(strip $(4)) || /g' $(3)/$$* | \
		( $(TIMER) --output=$$$$d $(TIMEFLAGS) $(1) 2> /dev/null) && \
		cat $$$$d >> $(strip $(2))-$(strip $(3))-$(strip $(4))-times.csv || \
		(printf "\r\033[0;31mFailed $$* with $(strip $(3))\033[0m\n" && \
		echo "$$*,-1" >> $(strip $(2))-$(strip $(3))-$(strip $(4))-times.csv))
endef

# This creates a target for each combination of the JS engine and
# directories in the current working directory.
# For example, if the directory contains `cps` and `yield` and engines `node`
# and `js`, targets node-cps-times.csv, node-yield-times.csv,
# js-yield-times.csv, and js-cps-times.csv will be created.
$(foreach tr, $(TRANSFORMS), \
	$(foreach edata, $(ENGINEDATA), \
	  $(foreach interval, $(INTERVALS), \
			$(eval $(call RUNNER_template, \
								 $(strip $(call GET_EPATH,$(edata))), \
								 $(strip $(call GET_ENAME,$(edata))), \
								 $(tr), \
								 $(interval))))))

# Rule to debug variables.
print-%  : ; @echo $* = $($*)
